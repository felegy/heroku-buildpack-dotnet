#!/usr/bin/env bash

# bin/compile <build-dir> <cache-dir> <env-dir>

# fail hard
set -o pipefail
# fail harder
set -eu
# move hidden files too, just in case
shopt -s dotglob

STACK=${STACK:-heroku-20} # Anvil has none

if [ $STACK != "cedar-14" ]; then
	echo "Stack ${STACK} not supported" && exit 1
fi

build_dir=$1
cache_dir=$2/dotnet
mkdir -p "$cache_dir"
env_dir=${3:-} # Anvil has none
bp_dir=$(cd "$(dirname "$0")"; cd ..; pwd)
dotnet_version=$(< "$bp_dir/global.json" grep -o '[0-9]\.[0-9]\.[0-9][0-9][0-9]')

status() {
	# send all of our output to stderr
	exec 1>&2
	# if arguments are given, redirect them to stdin
	# this allows the funtion to be invoked with a string argument, or with stdin, e.g. via <<-EOF
	(( $# )) && exec <<< "$@"
	echo -n "-----> "
	# this will be fed from stdin
	cat
}

# shellcheck disable=SC2120
indent() {
    # if any value (e.g. a non-empty string, or true, or false) is given for the first argument, this will act as a flag indicating we shouldn't indent the first line; we use :+ to tell SED accordingly if that parameter is set, otherwise null string for no range selector prefix (it selects from line 2 onwards and then every 1st line, meaning all lines)
    # if the first argument is an empty string, it's the same as no argument (useful if a second argument is passed)
    # the second argument is the prefix to use for indenting; defaults to seven space characters, but can be set to e.g. " !     " to decorate each line of an error message
    local c="${1:+"2,999"} s/^/${2-"       "}/"
    case $(uname) in
        Darwin) sed -l "$c";; # mac/bsd sed: -l buffers on line boundaries
        *)      sed -u "$c";; # unix/gnu sed: -u unbuffered (arbitrary) chunks of data
    esac
}

(
    status "Bootstraping ..."
    cd "$cache_dir";
    curl -fsSLO https://dot.net/v1/dotnet-install.sh;
    bash dotnet-install.sh \
        --install-dir "$cache_dir/.dotnet" \
        --version "$dotnet_version" \
    | tail -f -n +6 | indent;

    runtimes=("net6.0");
    #runtimes=("net6.0" "net5.0" "netcoreapp3.1");

    for runtime in "${runtimes[@]}"; do
        _dir="$cache_dir/.runtime/$runtime";
        _ver=$(echo "$runtime" | grep -o '[0-9]\.[0-9]');
        mkdir -p "$_dir";
        bash dotnet-install.sh \
            --install-dir "$_dir" \
            --channel "$_ver" \
            --architecture "x64" \
            --os "linux" \
            --runtime "aspnetcore" \
            --no-path \
        | tail -f -n +6 | indent;
    done;
)

(
    status "Executing build ..."
    cd "$bp_dir";
    eval "$bp_dir/build.sh" \
        --build-dir "$build_dir" \
        --cache-dir "$cache_dir" \
        --env-dir "$env_dir" \
        --target HerokuBuild \
        --configuration Release \
    | indent;
)
